# -*- coding: utf-8 -*-
"""Data Story-1 & 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16qFf6UCrb2kAzsXr2wdKml5HogOMNkzp
"""

from google.colab import files
data_to_load = files.upload()

import pandas as pd
import csv
import plotly.express as px
import plotly.graph_objects as go
import statistics
import random
import plotly.figure_factory as ff

with open('data.csv', newline="") as f:
  reader = csv.reader(f)
  data = list(reader)

data.pop(0)

df = pd.read_csv("data.csv")
fig = px.scatter(df, y="quant_saved", color="rem_any")
fig.show()

people_gotreminder = 0
people_didnotgetreminder = 0

for i in data:
  if int(i[3]) == 0:
    people_didnotgetreminder = people_didnotgetreminder + 1
  else:
    people_gotreminder = people_gotreminder + 1

print(people_gotreminder, people_didnotgetreminder)

fig = go.Figure(go.Bar(x=["Reminded", "Not Reminded"], y= [people_gotreminder,people_didnotgetreminder]))
fig.show()

sum_quant_saved = 0
quant_saved = []

for i in data:
  sum_quant_saved = sum_quant_saved + float(i[0])
  quant_saved.append(float(i[0]))

mean = statistics.mean(quant_saved)
median = statistics.median(quant_saved)
mode = statistics.mode(quant_saved)
sd = statistics.stdev(quant_saved)

print(mean, median, mode, sd)

"""Sampling distribution of two samplings of quantity saved"""

def get_random100_sample_average():
    samples = []
    for i in range(0, 100):
        random_no = random.randint(0, len(quant_saved)-1)
        datavalue = quant_saved[random_no]
        samples.append(datavalue)

    mean = statistics.mean(samples)
    return(mean)

def make_average_list():
    average_list = []
    for i in range(0, 2):
        average = get_random100_sample_average()
        average_list.append(average)

    return(average_list)

def calculations():
    averages = make_average_list()
    show_plot(averages)

    total_average = statistics.mean(averages)
    deviation = statistics.stdev(averages)
    print("Total average: " + str(total_average), ", Standard Deviation: " + str(deviation))

def show_plot(averages):
    fig = ff.create_distplot([averages], ["Average Distribution"], show_hist=False)
    fig.show()

calculations()

quantsavings_average = statistics.mean(quant_saved)

zscore = (quantsavings_average - 75.79677152615)/ 29.235803666117203
print(zscore)

quantsavings_gotreminded = []
quantsavings_notgotreminded = []

for i in data:
  if int(i[3]) == 1:
    quantsavings_gotreminded.append(float(i[0]))
  else:
    quantsavings_notgotreminded.append(float(i[0]))

quantsavings_mean = statistics.mean(quantsavings_gotreminded)
quantsavings_mode = statistics.mode(quantsavings_gotreminded)
quantsavings_median = statistics.median(quantsavings_gotreminded)

print(quantsavings_mean, quantsavings_mode, quantsavings_median)

quantsavings_mean = statistics.mean(quantsavings_notgotreminded)
quantsavings_mode = statistics.mode(quantsavings_notgotreminded)
quantsavings_median = statistics.median(quantsavings_notgotreminded)

print(quantsavings_mean, quantsavings_mode, quantsavings_median)

count = 0

for i in data:
  if float(i[5]) == 0:
    data.pop(count)
  count = count + 1

ages = []
savings = []

for i in data:
  ages.append(float(i[5]))
  savings.append(float(i[0]))

import numpy as np

a = np.corrcoef(ages, savings)
print(a[0][1])

fig = ff.create_distplot([savings], ["Savings plot"], show_hist = True)
fig.show()

import seaborn as sns
sns.boxplot(data=df, x=df["quant_saved"])

female = []
male = []

for i in data:
  if int(i[1]) == 1:
    female.append(float(i[0]))
  else:
    male.append(float(i[0]))

female_mean = statistics.mean(female)
female_mode = statistics.mode(female)
female_median = statistics.median(female)

print(female_mean, female_mode, female_median)

male_mean = statistics.mean(male)
male_mode = statistics.mode(male)
male_median = statistics.median(male)

print(male_mean, male_mode, male_median)